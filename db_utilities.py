# This file is for routines related to the google spreadsheet storing the game
# data.

import gspread
from google.oauth2.service_account import Credentials
import datetime
from game_pieces import Game, GreatOldOne, Investigator, Item, Task, Adventure
from utilities import get_selection, ending_the_fix, norm

SCOPE = [
    "https: //www.googleapis.com/auth/spreadsheets",
    "https: //www.googleapis.com/auth/drive.file",
    "https: //www.googleapis.com/auth/drive",
]

CREDS = Credentials.from_service_account_file("creds.json")
SCOPED_CREDS = CREDS.with_scopes(SCOPE)
GSPREAD_CLIENT = gspread.authorize(SCOPED_CREDS)
SHEET = GSPREAD_CLIENT.open("pp3-command-line-game")

# Dictionary to translate from the board game to my game and back.
TRANSLATION = {'Inv.': 'Investigate', 'Investigation': 'Investigate',
               'Lore': 'Lore', 'Peril': 'Skulls', 'Terror': 'Tentacles',
               'Unique': 'Unique Item', 'Common': 'Common Item',
               'Elder': 'Elder Sign', 'Clues': 'Clues', 'Clue': 'Clue',
               'Sanity': 'Sanity', 'Stamina': 'Health', 'Doom': 'Doom',
               'unique item': 'Unique', 'common item': 'Common',
               'spell': 'Spell', 'Spells': 'Spells', 'Spell': 'Spell'}


# Great Old One section
def fetch_great_old_ones() -> list['GreatOldOne']:
    """
    Constructs list of GreatOldOne objects from spreadsheet data.
    """
    raw = SHEET.worksheet("GreatOldOnes").get_all_values()
    keys = raw.pop(0)
    keys[0] = 'Name'
    great_old_ones_dicts = []
    index = 1
    for row in raw:
        great_old_ones_dicts.append({key: val for key, val in zip(keys, row)})
        great_old_ones_dicts[-1]['index'] = index
        index += 1
    return [goo_dict_to_goo(goo_dict) for goo_dict in great_old_ones_dicts]


def goo_dict_to_goo(goo: dict[str, str]) -> 'GreatOldOne':
    """
    Makes GreatOldOne object from dict generated by spreadsheet data.
    """
    index = goo['index']
    name = goo['Name']
    elder_signs = int(goo['Elder Signs Needed'])
    doom = int(goo['Doom to Awake'])
    return GreatOldOne(index, name, elder_signs, doom)


# Investigator section
def fetch_investigators() -> list['Investigator']:
    """
    Constructs list of Investigator objects from spreadsheet data.
    """
    raw = SHEET.worksheet("Investigators").get_all_values()
    keys = raw.pop(0)
    keys[0] = 'Name'
    inv_dicts = []
    for row in raw:
        inv_dicts.append({key: val for key, val in zip(keys, row)})
    # excluding because starting items are not implemented
    exclusions = ['Amanda Sharpe', '"Ashcan" Pete']
    inv_dicts = [inv_dict for inv_dict in inv_dicts if
                 inv_dict['Name'] not in exclusions]
    for index, inv_dict in enumerate(inv_dicts):
        inv_dict['index'] = index+1
    return [inv_dict_to_inv(inv_dict) for inv_dict in inv_dicts]


def inv_dict_to_inv(inv: dict[str, str]) -> 'Investigator':
    """
    Makes Investigator object from dict generated by spreadsheet data.
    """
    index = inv['index']
    name = ending_the_fix(inv['Name'])
    profession = inv['Profession']
    sanity = int(inv['Sanity'])
    health = int(inv['Stamina'])
    items = inv['Starting Items'].replace(' item', '').split(', ')
    return Investigator(index, name, profession, sanity, health, items)


# Item section
def fetch_items() -> list['Item']:
    """
    Constructs list of Item objects from spreadsheet data.
    """
    raw = SHEET.worksheet("Items").get_all_values()
    keys = raw.pop(0)
    keys[0] = 'Name'
    item_dicts = []
    for row in raw:
        item_dicts.append({key: val for key, val in zip(keys, row)})
    # excluding because effects aren't implemented
    exclusions = ['Flute of the Outer Gods', 'Shotgun',
                  'Blue Watcher of the Pyramid', 'Necronomicon']
    return [item_dict_to_item(item_dict) for item_dict in
            item_dicts if item_dict['Name'] not in exclusions]


def item_dict_to_item(item: dict[str, str]) -> 'Item':
    """
    Makes Item object from dict generated by spreadsheet data.
    """
    name = ending_the_fix(item['Name'])
    effect = item['Text/Effect']
    item_type = norm(item['Rarity'])
    return Item(name, effect, item_type)


# Adventure Card section
def fetch_adventures() -> list['Adventure']:
    """
    Constructs list of Adventure objects from spreadsheet data.
    """
    raw = SHEET.worksheet('Adventures').get_all_values()
    keys = raw.pop(0)
    keys[0] = 'Name'
    adventure_deck = []
    for row in raw:
        adv_dict = {key: val for key, val in zip(keys, row)}
        adventure_deck.append(adv_dict_to_adventure(adv_dict))
    # is the check regarding rewards relevant anymore?
    return [adventure for adventure in adventure_deck if adventure.reward]


def adv_dict_to_adventure(adv_dict: dict[str, str]) -> "Adventure":
    """
    Makes Adventure object from dict generated by spreadsheet data.
    """
    task_data = [adv_dict['Task 1'], adv_dict['Task 2'], adv_dict['Task 3']]
    tasks = create_task_list(task_data)
    reward = create_outcome(adv_dict['Rewards'])
    penalty = create_outcome(adv_dict['Penalties'])
    adventure_card = Adventure(ending_the_fix(adv_dict['Name']),
                               adv_dict['Flavor Text'], tasks, reward, penalty)
    return adventure_card


def create_task_list(task_data: list[str]) -> list['Task']:
    """
    Creates task list for Adventure object.
    """
    tasks = []
    for task_raw in task_data:
        if not task_raw.strip():
            break
        tasks.append(create_task(task_raw))
    return tasks


def clean_raw(raw: str) -> str:
    """
    Removes keywords for unimplemented aspects of the board game.
    """
    raw = raw.replace(' -->', ', ')
    remove_terms = [' (Total Monster Task)', ' (Partial Monster Task)',
                    ' (Total Monter Task)', ' Token', ' Signs', ' Sign']
    for term in remove_terms:
        raw = raw.replace(term, '')
    return raw


def translate_term(term: str) -> str:
    """
    Translates between terms in the board game and my terminology.
    """
    term = term.title()
    return TRANSLATION[term]


def create_task(task_raw: str) -> 'Task':
    """
    Creates individual Task object from string description.
    """
    task_raw = clean_raw(task_raw)
    parts = task_raw.split(', ')
    pattern = {}
    for part in parts:
        part = part.split()
        int(part[0])
        pattern[translate_term(part[1])] = int(part[0])
    return Task(pattern)


def clean_outcome_list(outcome_list: list[str]) -> list[str]:
    """
    Removes keywords for unimplemented aspects of the board game.
    """
    drop_terms = ['Other', 'Monster', 'Monter', 'Ally']
    cleaned_outcome_list = []
    for item in outcome_list:
        add = True
        for term in drop_terms:
            if term in item:
                add = False
                break
        if add:
            cleaned_outcome_list.append(clean_raw(item))
    return cleaned_outcome_list


def create_outcome(outcome_raw: str) -> dict[str, int]:
    """
    Creates Reward and Penalty dictionaries for Adventure Cards.
    """
    outcome_list = outcome_raw.split(', ')
    outcome_list = clean_outcome_list(outcome_list)
    proper_outcomes = {}
    for outcome in outcome_list:
        term = translate_term(outcome.split()[1])
        proper_outcomes[term] = int(outcome.split()[0])
    return proper_outcomes


class GameSelection:
    """
    Queries the spreadsheet and initializes the potential game state.
    """
    def __init__(self) -> None:
        print('Loading game data...')
        self.adventure_deck = fetch_adventures()
        self.item_deck = fetch_items()
        self.great_old_ones = fetch_great_old_ones()
        self.investigators = fetch_investigators()
        print('Game data loaded.')

    def select_great_old_one(self):
        for great_old_one in self.great_old_ones:
            great_old_one.selection()
        index = get_selection(len(self.great_old_ones), 'a Great Old One to '
                              'battle')
        return self.great_old_ones[index]

    def select_investigator(self):
        for investigator in self.investigators:
            investigator.selection()
        index = get_selection(len(self.investigators), 'an investigator to '
                              'play as')
        return self.investigators[index]


def record(game: 'Game') -> None:
    """
    Records the result of the game to external spreadsheet.
    """
    result = ''
    investigator = game.investigator.name
    great_old_one = game.great_old_one.name
    if not game.end_condition:
        pass
    elif game.end_condition == "Banished":
        result = f"{investigator} defeated {great_old_one}."
    elif game.end_condition == "Died":
        result = f"{investigator} perished and {great_old_one} devoured the "\
                 "world."
    elif game.end_condition == "Summoned":
        result = f"{investigator} was unable to prevent {great_old_one} from "\
                 "being summoned and devouring the world."
    target_sheet = SHEET.worksheet('Records')
    record = [game.player, game.game_start_time, str(datetime.datetime.now()),
              investigator, great_old_one, result]
    target_sheet.append_row(record)
